#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Định nghĩa cấu trúc của một node trong danh sách liên kết vòng
struct node {
    char name[50];          // Tên
    char telephone[15];     // Số điện thoại
    char email[50];         // Email
    char address[100];      // Địa chỉ
    struct node *next;      // Con trỏ tới node tiếp theo
} *head;                    // Con trỏ đầu danh sách

// Hàm tạo danh sách liên kết vòng với n node
void createCircularLinkedList(int n) {
    char name[50], telephone[15], email[50], address[100];
    int i;
    struct node *newNode, *temp;

    // Kiểm tra nếu n <= 0, không thể tạo danh sách
    if (n <= 0) {
        printf("Invalid input for number of nodes\n");
        return;
    }

    // Cấp phát bộ nhớ cho node đầu tiên
    head = (struct node*)malloc(sizeof(struct node));
    if (head == NULL) {
        printf("Memory not available!\n");
        return;
    }

    // Nhập thông tin cho node đầu tiên
    printf("Enter name for node 1: ");
    scanf("%49s", name);
    printf("Enter telephone for node 1: ");
    scanf("%14s", telephone);
    printf("Enter email for node 1: ");
    scanf("%49s", email);
    printf("Enter address for node 1: ");
    scanf("%99s", address);

    // Sao chép thông tin vào node đầu tiên
    strcpy(head->name, name);
    strcpy(head->telephone, telephone);
    strcpy(head->email, email);
    strcpy(head->address, address);
    
    head->next = head; // Liên kết node đầu tiên với chính nó (tạo vòng)
    temp = head;

    // Vòng lặp để tạo các node còn lại
    for (i = 2; i <= n; i++) {
        newNode = (struct node*)malloc(sizeof(struct node));
        if (newNode == NULL) {
            printf("Unable to allocate memory\n");
            break;
        }

        // Nhập thông tin cho node mới
        printf("Enter name for node %d: ", i);
        scanf("%49s", name);
        printf("Enter telephone for node %d: ", i);
        scanf("%14s", telephone);
        printf("Enter email for node %d: ", i);
        scanf("%49s", email);
        printf("Enter address for node %d: ", i);
        scanf("%99s", address);

        // Sao chép thông tin vào node mới
        strcpy(newNode->name, name);
        strcpy(newNode->telephone, telephone);
        strcpy(newNode->email, email);
        strcpy(newNode->address, address);

        newNode->next = head; // Liên kết node mới với head
        temp->next = newNode; // Liên kết node trước đó với node mới
        temp = newNode;
    }

    printf("Circular Linked List created successfully!\n");
}
// Định nghĩa hàm hiển thị danh sách
void displayList() {
    struct node *current;

    // Kiểm tra danh sách có rỗng hay không
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    // In thông tin của từng node trong danh sách liên kết vòng
    printf("Circular Linked List:\n");
    current = head;
    do {
        printf("Name: %s\n", current->name);
        printf("Telephone: %s\n", current->telephone);
        printf("Email: %s\n", current->email);
        printf("Address: %s\n", current->address);
        printf("\n");
        current = current->next;
    } while (current != head);
}

// Hàm thêm node mới vào đầu danh sách
void addNodeAtBeginning(char *name, char *telephone, char *email, char *address) {
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    struct node *last = head;

    if (newNode == NULL) {
        printf("Unable to allocate memory.\n");
        return;
    }

    // Sao chép thông tin vào node mới
    strcpy(newNode->name, name);
    strcpy(newNode->telephone, telephone);
    strcpy(newNode->email, email);
    strcpy(newNode->address, address);

    // Nếu danh sách rỗng, node mới trở thành head và tự liên kết với chính nó
    if (head == NULL) {
        head = newNode;
        newNode->next = head;
    } else {
        // Tìm node cuối cùng
        while (last->next != head) {
            last = last->next;
        }

        newNode->next = head; // Liên kết node mới với head
        last->next = newNode; // Liên kết node cuối cùng với node mới
        head = newNode; // Node mới trở thành head
    }

    printf("Node inserted successfully.\n");
}

// Hàm xóa node theo tên
void deleteNodeByName(char *name) {
    struct node *current = head, *prev = NULL, *temp = NULL;
    int found = 0;

    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    // Tìm node cần xóa
    do {
        if (strcmp(current->name, name) == 0) {
            found = 1;
            if (current == head) {
                // Nếu node cần xóa là head
                if (head->next == head) {
                    free(head);
                    head = NULL;
                } else {
                    // Tìm node cuối cùng
                    temp = head;
                    while (temp->next != head) {
                        temp = temp->next;
                    }
                    temp->next = head->next; // Liên kết node cuối cùng với node sau head
                    free(head);
                    head = temp->next; // Cập nhật head
                }
            } else {
                prev->next = current->next; // Bỏ qua node cần xóa
                free(current);
            }
            printf("Entry with name '%s' deleted successfully.\n", name);
            break;
        }
        prev = current;
        current = current->next;
    } while (current != head);

    if (!found) {
        printf("Entry with name '%s' not found.\n", name);
    }
}

// Hàm cập nhật số điện thoại theo tên
void updateTelephoneByName(char *name, char *newTelephone) {
    struct node *current = head;
    int updated = 0;

    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    // Tìm node cần cập nhật
    do {
        if (strcmp(current->name, name) == 0) {
            strcpy(current->telephone, newTelephone);
            printf("Telephone number updated successfully for '%s'.\n", name);
            updated = 1;
            break;
        }
        current = current->next;
    } while (current != head);

    if (!updated) {
        printf("Entry with name '%s' not found.\n", name);
    }
}

// Hàm tìm kiếm node theo tên Linear Searching
void searchByName(char *name) {
    struct node *current = head;
    int found = 0;
    int position = 0; // Bi?n ð?m v? trí

    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    // Tim node theo tên
    do {
        if (strcmp(current->name, name) == 0) {
            printf("Name: %s\n", current->name);
            printf("Telephone: %s\n", current->telephone);
            printf("Email: %s\n", current->email);
            printf("Address: %s\n", current->address);
            printf("Position: %d\n", position); // In ra v? trí
            found = 1;
            break;
        }
        current = current->next;
        position++; // Tãng v? trí lên 1
    } while (current != head);

    if (!found) {
        printf("Entry with name '%s' not found.\n", name);
    }
}

// Hàm sắp xếp danh sách liên kết vòng theo tên sử dụng Bubble Sort
void bubbleSort() {
    if (head == NULL) {
        return;
    }

    int swapped;
    struct node *ptr1;
    struct node *lptr = NULL;

    do {
        swapped = 0;
        ptr1 = head;

        do {
            if (strcmp(ptr1->name, ptr1->next->name) > 0) {
                // Hoán ð?i d? li?u gi?a ptr1 và ptr1->next
                char tempName[100], tempTelephone[20], tempEmail[100], tempAddress[200];

                strcpy(tempName, ptr1->name);
                strcpy(tempTelephone, ptr1->telephone);
                strcpy(tempEmail, ptr1->email);
                strcpy(tempAddress, ptr1->address);

                strcpy(ptr1->name, ptr1->next->name);
                strcpy(ptr1->telephone, ptr1->next->telephone);
                strcpy(ptr1->email, ptr1->next->email);
                strcpy(ptr1->address, ptr1->next->address);

                strcpy(ptr1->next->name, tempName);
                strcpy(ptr1->next->telephone, tempTelephone);
                strcpy(ptr1->next->email, tempEmail);
                strcpy(ptr1->next->address, tempAddress);

                swapped = 1;
            }
            ptr1 = ptr1->next;
        } while (ptr1->next != lptr);

        lptr = ptr1;
    } while (swapped);
}
// Hàm chính
int main() {
    int choice, n;
    char name[50], telephone[15], email[50], address[100];
    // Vòng lặp menu chính
    while (1) {
        printf("\nTelephone Directory Management System Menu:\n");
        printf("1. Create Circular Linked List\n");
        printf("2. Add Node at Beginning\n");
        printf("3. Delete Node by Name\n");
        printf("4. Update Telephone by Name\n");
        printf("5. Search by Name\n");
        printf("6. Sort List\n");
        printf("7. Display List\n"); // Thêm lựa chọn hiển thị danh sách
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of nodes: ");
                scanf("%d", &n);
                createCircularLinkedList(n);
                break;
            case 2:
                printf("Enter name: ");
                scanf("%49s", name);
                printf("Enter telephone: ");
                scanf("%14s", telephone);
                printf("Enter email: ");
                scanf("%49s", email);
                printf("Enter address: ");
                scanf("%99s", address);
                addNodeAtBeginning(name, telephone, email, address);
                break;
            case 3:
                printf("Enter name to delete: ");
                scanf("%49s", name);
                deleteNodeByName(name);
                break;
            case 4:
                printf("Enter name to update telephone: ");
                scanf("%49s", name);
                printf("Enter new telephone number: ");
                scanf("%14s", telephone);
                updateTelephoneByName(name, telephone);
                break;
            case 5:
                printf("Enter name to search: ");
                scanf("%49s", name);
                searchByName(name);
                break;
            case 6:
                bubbleSort();
                break;
            case 7:
                displayList();
                break;
            case 8:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice, please enter a number between 1 and 8.\n");
        }
    }

    return 0;
}
